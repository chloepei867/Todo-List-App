{"ast":null,"code":"import { API_URL } from './../app.constants';\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const TOKEN = 'token';\nexport const AUTHENTICATED_USER = 'authenticaterUser';\nexport class BasicAuthenticationService {\n  constructor(http) {\n    this.http = http;\n  }\n  // authenticate(username: any, password: any) {\n  //   console.log('before ' + this.isUserLoggedIn());\n  //   if (username === \"chloe\" && password === \"dummy\") {\n  //     sessionStorage.setItem('authenticateUser', username)\n  //     console.log('after ' + this.isUserLoggedIn());\n  //     return true;\n  //   }\n  //   return false;\n  // }\n  executeAuthenticationService(username, password) {\n    let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password);\n    let headers = new HttpHeaders({\n      Authorization: basicAuthHeaderString\n    });\n    return this.http.get(`${API_URL}/basicauth`, {\n      headers\n    }).pipe(map(data => {\n      sessionStorage.setItem(AUTHENTICATED_USER, username);\n      sessionStorage.setItem(TOKEN, basicAuthHeaderString);\n      return data;\n    }));\n    //console.log(\"Execute Hello World Bean Service\")\n  }\n\n  getAuthenticatedUser() {\n    return sessionStorage.getItem(AUTHENTICATED_USER);\n  }\n  getAuthenticatedToken() {\n    if (this.getAuthenticatedUser()) return sessionStorage.getItem(TOKEN);\n  }\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(AUTHENTICATED_USER);\n    return !(user === null);\n  }\n  //remove user authentication token when user logs out.  \n  logout() {\n    sessionStorage.removeItem(AUTHENTICATED_USER);\n  }\n}\nBasicAuthenticationService.ɵfac = function BasicAuthenticationService_Factory(t) {\n  return new (t || BasicAuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n};\nBasicAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BasicAuthenticationService,\n  factory: BasicAuthenticationService.ɵfac,\n  providedIn: 'root'\n});\nexport class AuthenticationBean {\n  constructor(message) {\n    this.message = message;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAAqBC,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,GAAG,QAAQ,gBAAgB;;;AAEpC,OAAO,MAAMC,KAAK,GAAG,OAAO;AAC5B,OAAO,MAAMC,kBAAkB,GAAG,mBAAmB;AAMrD,OAAM,MAAOC,0BAA0B;EAErCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAExC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,4BAA4B,CAACC,QAAQ,EAAEC,QAAQ;IAE7C,IAAIC,qBAAqB,GAAG,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACJ,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAAC;IAE7E,IAAII,OAAO,GAAG,IAAIb,WAAW,CAAC;MAC5Bc,aAAa,EAAEJ;KAChB,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAClB,GAAGhB,OAAO,YAAY,EACtB;MAAEc;IAAO,CAAE,CAAC,CAACG,IAAI,CACff,GAAG,CACDgB,IAAI,IAAG;MACLC,cAAc,CAACC,OAAO,CAAChB,kBAAkB,EAAEK,QAAQ,CAAC;MACpDU,cAAc,CAACC,OAAO,CAACjB,KAAK,EAAEQ,qBAAqB,CAAC;MACpD,OAAOO,IAAI;IACb,CAAC,CACF,CACF;IACH;EACF;;EAGAG,oBAAoB;IAClB,OAAOF,cAAc,CAACG,OAAO,CAAClB,kBAAkB,CAAC;EACnD;EAEAmB,qBAAqB;IACnB,IAAI,IAAI,CAACF,oBAAoB,EAAE,EAC7B,OAAOF,cAAc,CAACG,OAAO,CAACnB,KAAK,CAAC;EACxC;EAEAqB,cAAc;IACZ,IAAIC,IAAI,GAAGN,cAAc,CAACG,OAAO,CAAClB,kBAAkB,CAAC;IACrD,OAAO,EAAEqB,IAAI,KAAK,IAAI,CAAC;EACzB;EACA;EACAC,MAAM;IACJP,cAAc,CAACQ,UAAU,CAACvB,kBAAkB,CAAC;EAC/C;;AArDWC,0BAA0B;mBAA1BA,0BAA0B;AAAA;AAA1BA,0BAA0B;SAA1BA,0BAA0B;EAAAuB,SAA1BvB,0BAA0B;EAAAwB,YAHzB;AAAM;AAwEpB,OAAM,MAAOC,kBAAkB;EAC7BxB,YAAmByB,OAAe;IAAf,YAAO,GAAPA,OAAO;EAAY","names":["API_URL","HttpHeaders","map","TOKEN","AUTHENTICATED_USER","BasicAuthenticationService","constructor","http","executeAuthenticationService","username","password","basicAuthHeaderString","window","btoa","headers","Authorization","get","pipe","data","sessionStorage","setItem","getAuthenticatedUser","getItem","getAuthenticatedToken","isUserLoggedIn","user","logout","removeItem","factory","providedIn","AuthenticationBean","message"],"sourceRoot":"","sources":["D:\\01_CS\\spring\\todo\\src\\app\\service\\basic-authentication.service.ts"],"sourcesContent":["import { API_URL } from './../app.constants';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nexport const TOKEN = 'token'\nexport const AUTHENTICATED_USER = 'authenticaterUser'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class BasicAuthenticationService {\n\n  constructor(private http: HttpClient) { }\n\n  // authenticate(username: any, password: any) {\n  //   console.log('before ' + this.isUserLoggedIn());\n  //   if (username === \"chloe\" && password === \"dummy\") {\n  //     sessionStorage.setItem('authenticateUser', username)\n  //     console.log('after ' + this.isUserLoggedIn());\n  //     return true;\n  //   }\n  //   return false;\n  // }\n\n  executeAuthenticationService(username, password) {\n\n    let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password);\n\n    let headers = new HttpHeaders({\n      Authorization: basicAuthHeaderString\n    })\n\n    return this.http.get<AuthenticationBean>(\n      `${API_URL}/basicauth`,\n      { headers }).pipe(\n        map(\n          data => {\n            sessionStorage.setItem(AUTHENTICATED_USER, username);\n            sessionStorage.setItem(TOKEN, basicAuthHeaderString);\n            return data;\n          }\n        )\n      );\n    //console.log(\"Execute Hello World Bean Service\")\n  }\n\n\n  getAuthenticatedUser() {\n    return sessionStorage.getItem(AUTHENTICATED_USER)\n  }\n\n  getAuthenticatedToken() {\n    if (this.getAuthenticatedUser())\n      return sessionStorage.getItem(TOKEN)\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(AUTHENTICATED_USER)\n    return !(user === null)\n  }\n  //remove user authentication token when user logs out.  \n  logout() {\n    sessionStorage.removeItem(AUTHENTICATED_USER)\n  }\n\n\n\n  //Access to XMLHttpRequest at 'http://localhost:8080/users/chloe/todos' from origin \n  //'http://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present \n  //on the requested resource.\n\n  // createBasicAuthenticationHttpHeader() {\n  //   let username = \"chloe\"\n  //   let password = \"dummy\"\n  //   let basicAuthHeaderString = \"Basic \" + window.btoa(username + \":\" + password);\n  //   return basicAuthHeaderString;\n}\n\n\nexport class AuthenticationBean {\n  constructor(public message: string) { }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}