{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BasicAuthenticationService {\n  constructor(http) {\n    this.http = http;\n  }\n  authenticate(username, password) {\n    console.log('before ' + this.isUserLoggedIn());\n    if (username === \"chloe\" && password === \"dummy\") {\n      sessionStorage.setItem('authenticateUser', username);\n      console.log('after ' + this.isUserLoggedIn());\n      return true;\n    }\n    return false;\n  }\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticateUser');\n    return !(user === null);\n  }\n  //remove user authentication token when user logs out.  \n  logout() {\n    sessionStorage.removeItem('authenticateUser');\n  }\n  executeAuthenticationService(username, password) {\n    let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password);\n    let headers = new HttpHeaders({\n      Authorization: basicAuthHeaderString\n    });\n    return this.http.get(`${API_URL}/basicauth`, {\n      headers\n    }).pipe(map(data => {\n      sessionStorage.setItem(AUTHENTICATED_USER, username);\n      sessionStorage.setItem(TOKEN, basicAuthHeaderString);\n      return data;\n    }));\n    //console.log(\"Execute Hello World Bean Service\")\n  }\n}\n\nBasicAuthenticationService.ɵfac = function BasicAuthenticationService_Factory(t) {\n  return new (t || BasicAuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n};\nBasicAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BasicAuthenticationService,\n  factory: BasicAuthenticationService.ɵfac,\n  providedIn: 'root'\n});\nexport class AuthenticationBean {\n  constructor(message) {\n    this.message = message;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,0BAA0B;EAErCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAExCC,YAAY,CAACC,QAAa,EAAEC,QAAa;IACvCC,OAAO,CAACC,GAAG,CAAC,SAAS,GAAG,IAAI,CAACC,cAAc,EAAE,CAAC;IAC9C,IAAIJ,QAAQ,KAAK,OAAO,IAAIC,QAAQ,KAAK,OAAO,EAAE;MAChDI,cAAc,CAACC,OAAO,CAAC,kBAAkB,EAAEN,QAAQ,CAAC;MACpDE,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAACC,cAAc,EAAE,CAAC;MAC7C,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEAA,cAAc;IACZ,IAAIG,IAAI,GAAGF,cAAc,CAACG,OAAO,CAAC,kBAAkB,CAAC;IACrD,OAAO,EAAED,IAAI,KAAK,IAAI,CAAC;EACzB;EACA;EACAE,MAAM;IACJJ,cAAc,CAACK,UAAU,CAAC,kBAAkB,CAAC;EAC/C;EAEAC,4BAA4B,CAACX,QAAQ,EAAEC,QAAQ;IAE7C,IAAIW,qBAAqB,GAAG,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACd,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAAC;IAE7E,IAAIc,OAAO,GAAG,IAAIpB,WAAW,CAAC;MAC5BqB,aAAa,EAAEJ;KAChB,CAAC;IAEF,OAAO,IAAI,CAACd,IAAI,CAACmB,GAAG,CAClB,GAAGC,OAAO,YAAY,EACtB;MAAEH;IAAO,CAAE,CAAC,CAACI,IAAI,CACfC,GAAG,CACDC,IAAI,IAAG;MACLhB,cAAc,CAACC,OAAO,CAACgB,kBAAkB,EAAEtB,QAAQ,CAAC;MACpDK,cAAc,CAACC,OAAO,CAACiB,KAAK,EAAEX,qBAAqB,CAAC;MACpD,OAAOS,IAAI;IACb,CAAC,CACF,CACF;IACH;EACF;;;AA3CWzB,0BAA0B;mBAA1BA,0BAA0B;AAAA;AAA1BA,0BAA0B;SAA1BA,0BAA0B;EAAA4B,SAA1B5B,0BAA0B;EAAA6B,YAHzB;AAAM;AA4DpB,OAAM,MAAOC,kBAAkB;EAC7B7B,YAAmB8B,OAAe;IAAf,YAAO,GAAPA,OAAO;EAAY","names":["HttpHeaders","BasicAuthenticationService","constructor","http","authenticate","username","password","console","log","isUserLoggedIn","sessionStorage","setItem","user","getItem","logout","removeItem","executeAuthenticationService","basicAuthHeaderString","window","btoa","headers","Authorization","get","API_URL","pipe","map","data","AUTHENTICATED_USER","TOKEN","factory","providedIn","AuthenticationBean","message"],"sourceRoot":"","sources":["D:\\01_CS\\spring\\todo\\src\\app\\service\\basic-authentication.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class BasicAuthenticationService {\n\n  constructor(private http: HttpClient) { }\n\n  authenticate(username: any, password: any) {\n    console.log('before ' + this.isUserLoggedIn());\n    if (username === \"chloe\" && password === \"dummy\") {\n      sessionStorage.setItem('authenticateUser', username)\n      console.log('after ' + this.isUserLoggedIn());\n      return true;\n    }\n    return false;\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticateUser')\n    return !(user === null)\n  }\n  //remove user authentication token when user logs out.  \n  logout() {\n    sessionStorage.removeItem('authenticateUser')\n  }\n\n  executeAuthenticationService(username, password) {\n\n    let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password);\n\n    let headers = new HttpHeaders({\n      Authorization: basicAuthHeaderString\n    })\n\n    return this.http.get<AuthenticationBean>(\n      `${API_URL}/basicauth`,\n      { headers }).pipe(\n        map(\n          data => {\n            sessionStorage.setItem(AUTHENTICATED_USER, username);\n            sessionStorage.setItem(TOKEN, basicAuthHeaderString);\n            return data;\n          }\n        )\n      );\n    //console.log(\"Execute Hello World Bean Service\")\n  }\n\n  //Access to XMLHttpRequest at 'http://localhost:8080/users/chloe/todos' from origin \n  //'http://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present \n  //on the requested resource.\n\n  // createBasicAuthenticationHttpHeader() {\n  //   let username = \"chloe\"\n  //   let password = \"dummy\"\n  //   let basicAuthHeaderString = \"Basic \" + window.btoa(username + \":\" + password);\n  //   return basicAuthHeaderString;\n  // }\n}\n\nexport class AuthenticationBean {\n  constructor(public message: string) { }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}